let grid = Array.from({ length: 20 }, () => Array(10).fill(0));
const shapes = [
 [
    [0, 0, 0, 0],
    [1, 1, 1, 1],
    [0, 0, 0, 0],
    [0, 0, 0, 0]
 ],
 [
    [0, 0, 0, 0],
    [0, 1, 1, 0],
    [0, 1, 1, 0],
    [0, 0, 0, 0]
 ],
 [
    [0, 0, 0, 0],
    [0, 1, 1, 0],
    [0, 1, 0, 0],
    [0, 0, 0, 0]
 ],
 [
    [0, 0, 0, 0],
    [0, 1, 1, 1],
    [0, 0, 0, 0],
    [0, 0, 0, 0]
 ],
 [
    [0, 0, 0, 0],
    [0, 1, 1, 0],
    [0, 0, 1, 1],
    [0, 0, 0, 0]
 ],
 [
    [0, 0, 0, 0],
    [0, 1, 1, 1],
    [0, 1, 0, 0],
    [0, 0, 0, 0]
 ],
 [
    [0, 0, 0, 0],
    [0, 1, 1, 1],
    [0, 0, 1, 1],
    [0, 0, 0, 0]
 ]
];
let current = {
 shape: shapes[Math.floor(Math.random() * shapes.length)],
 position: { x: 4, y: 0 },
 orientation: 0
};
function drawTetromino(current, grid) {
 for (let row = 0; row < current.shape.length; row++) {
    for (let col = 0; col < current.shape[row].length; col++) {
      const absoluteRow = current.position.y + row;
      const absoluteCol = current.position.x + col;
      if (current.shape[row][col] === 1 && absoluteRow >= 0) {
        grid[absoluteRow][absoluteCol] = 1;
      }
    }
 }
}
function rotate(current) {
 const newOrientation = (current.orientation + 1) % current.shape.length;
 const shapeWidth = current.shape[0].length;
 const newX = current.position.x - Math.floor(shapeWidth / 2);
 const newY = current.position.y - Math.floor(shapeWidth / 2);
 return {
   shape: current.shape,
   position: { x: newX, y: newY },
   orientation: newOrientation
 };
}
function clearFilledRows(grid) {
 let rowsFilled = false;
 for (let row = 0; row < grid.length; row++) {
   if (grid[row].every(cell => cell === 1)) {
     rowsFilled = true;
     grid.splice(row, 1);
     grid.unshift(Array(grid[0].length).fill(0));
   }
 }
function clearFilledRows(grid) {
 let rowsFilled = false;
 for (let row = 0; row < grid.length; row++) {
   if (grid[row].every(cell => cell === 1)) {
     rowsFilled = true;
     grid.splice(row, 1);
     grid.unshift(Array(grid[0].length).fill(0));
   }
 }
 return rowsFilled;
}
    public Stack()
    {
        Top = null;
    }

    public void Push(T value)
    {
        Node<T> node = new Node<T>(value);
        node.Next = Top;
        Top = node;
    }

    public T Pop()
    {
        if (Top == null)
        {
            throw new NullReferenceException("Stack is empty.");
        }

        T value = Top.Value;
        Top = Top.Next;
        return value;
    }

    public T Peek()
    {
        if (Top == null)
        {
            throw new NullReferenceException("Stack is empty.");
        }

        return Top.Value;
    }

    public bool IsEmpty()
    {
        return Top == null;
    }
}
